== Используемые языки
Приложение написано с использованием следующих языков

* Coffeescript (http://coffeescript.org). Язык, компилируемый в javascript
* Sass (http://sass-lang.com). Язык, компилируемый в css
* ECO (https://github.com/sstephenson/eco). Язык шаблонов, использующий coffeescript, компилирующий шаблоны в javascript.
* HAML (http://haml.info). Язык разметки, компилируемый в HTML

Основная идея приложения состоит в использовании библиотеки Backbone (http://backbonejs.ru).

Структура расположения файлов выбрана в соответствии с библиотекой backbone-on-rails (https://github.com/meleyal/backbone-on-rails)

== Установка
Необходимо установить:

1. nodejs (http://nodejs.org). В современных дистрибутивах linux поставляется в стандартных пакетах.
2. ruby 2. Использование системного ruby может не подойти. Для приложения рекомендуется установить rvm (https://rvm.io). Установку следует запускать с параметром 
  --ruby-2.2

После установки rvm и ruby необходимо

1. Перезапустить сессию bash
2. Убедиться, что мы используем нужную версию ruby. Проверить это можно командой rvm list. Стрелочкой будет отмечена используемая версия.
3. Перейти в каталог с приложением.
4. Поставить необходимые библиотеки командой bundle

Если всё сделано правильно, то спустя некоторое время будет выдано сообщение Your bundle is complete!

Установка завершена.

== Сборка
Для компиляции кода используется Sprockets https://github.com/sstephenson/sprockets. Конфигурация Sprockets и его вызов сделаны через Ruby on Rails (http://rubyonrails.org).

Для компиляции HAML используется Ruby on Rails

Сборка с использованием такой конфигурации может быть сделана командой 
  make
в каталоге приложения. После выполнения команды, все необходимы для публикации файлы будут находиться в папке public, содержимое которой можно перенести на сервер.

== Публикация

В целях безопасности, браузер запрещает отправку AJAX-запросов на сторонние сервера. Ограничение можно обойти настроив прокси для запросов по адресу /api

Пример конфигурации для NGINX для размещения приложения под доменным именем school.local в каталоге /home/www/school

  server {
    server_name school.local;

    root /home/www/school;

    location /api {
        proxy_set_header Host www.school-30.com;
        proxy_pass http://api_proxy;
    }
  }

  upstream api_proxy {
    server www.school-30.com;
  }

В этом конфигурационном файле все запросы, начинающиеся с /api будут проксироваться на сервер www.school-30.com. В запросе будет подменён заголовк HOST на www.school-30.com

== Разработка
Для запуска приложения в режиме разработки необходимо предварительно удалить сгенерированные статичные файлы. Это можно сделать командой 
  make clean
После этого, достаточно запустить команду rails server и зайти по адресу http://localhost:3000
В режим разработки все файлы будут компилироваться на лету. Также осуществляется проксирование запросов /api* средствами локального сервера.

Для редактирования файлов был использован текстовый редактор sublime с плагинами для подсветки синтаксиса coffeescript, ECO, sass, scss. Ширина отступа — 2 пробела, табуляции не используются.

== Структура файлов
Файлы для разработчика находятся в каталоге app. Основные файлы и каталоги, а также их назначение, описаны ниже

* app/assets/images — содержит картинки, необходимые для шаблона.
* app/assets/javascripts — содержит javascript-файлы. Основной подключаемый файл — application.js, который в свою очередь подключает файлы с помощью команды require, например
  //= require jquery
Файлы подключаются из библиотек, из каталогов vendor/assets/javascripts, app/assets/javascripts. Файлы в каталоге vendor поставляются сторонними разработчиками, однако в случае этого приложения там лежит слегка изменённая версия fotorama.
* app/assets/stylesheets — содержит css-файлы. Основной подключемвый файл — application.css. Он также подключает дополнительные файлы. Все файлы, кроме fixes.sass, поддерживаются верстальщиком. Файл fixes.sass содержит дополнительные селекторы, необходимые для работы javascript-кода или мелких модификаций.
* app/assets/tempaltes — содержит клиентские шаблоны на языке ECO.
* app/controllers — контроллеры Rails. В нашем случае не используется, поскольку Rails служит только для сборки статичных файлов и для запуска среды разработки.
* app/helpers — хелперы Rails. В нашем случае не используется, поскольку Rails служит только для сборки статичных файлов.
* app/mailers —  мэйлеры Rails. В нашем случае не используется, поскольку Rails служит только для сборки статичных файлов.
* app/views —  шаблоны Rails. Формирует index.hml файл. Шаблоны написаны на языке haml. При необходимости вставки html-кода, можно вставить partial, как это сделано для счётчиков (файл shared/_counters.html.erb). Также шаблоны можно перевести в html.erb с помощью одного из онлайн-конвертеров, например https://haml2erb.org (расширение файлов поменять с .haml на .html.erb)

Стурктура файлов javascripts следующая

* application.js — основной файл, который подключает другие файлы
* school30.js.coffee — файл приложения
* scrollable.coffee, modal_window.coffee — дополнительные библиотеки
* collections — классы для работы с коллекциями моделей
* models — модели сущностей
* routes — классы для управления маршрутами URL
* views — классы для применения шаблонов

Подробную информацию по классам Backbone на русском можно узнать на сайте http://backbonejs.ru